// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	lelangs "BukaLelang/app/features/lelangs"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateLelangWithBid provides a mock function with given fields: lelang, userID
func (_m *Service) CreateLelangWithBid(lelang lelangs.Core, userID uint) error {
	ret := _m.Called(lelang, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(lelangs.Core, uint) error); ok {
		r0 = rf(lelang, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLelang provides a mock function with given fields: id
func (_m *Service) DeleteLelang(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLelang provides a mock function with given fields: lelangid
func (_m *Service) GetLelang(lelangid uint) (lelangs.Core, error) {
	ret := _m.Called(lelangid)

	var r0 lelangs.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (lelangs.Core, error)); ok {
		return rf(lelangid)
	}
	if rf, ok := ret.Get(0).(func(uint) lelangs.Core); ok {
		r0 = rf(lelangid)
	} else {
		r0 = ret.Get(0).(lelangs.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(lelangid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLelangs provides a mock function with given fields:
func (_m *Service) GetLelangs() ([]lelangs.Core, error) {
	ret := _m.Called()

	var r0 []lelangs.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]lelangs.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []lelangs.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lelangs.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLelangsByCategory provides a mock function with given fields: category
func (_m *Service) GetLelangsByCategory(category string) ([]lelangs.Core, error) {
	ret := _m.Called(category)

	var r0 []lelangs.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]lelangs.Core, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(string) []lelangs.Core); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lelangs.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLelangsByUserID provides a mock function with given fields: userid
func (_m *Service) GetLelangsByUserID(userid uint) ([]lelangs.Core, error) {
	ret := _m.Called(userid)

	var r0 []lelangs.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]lelangs.Core, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(uint) []lelangs.Core); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lelangs.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLelang provides a mock function with given fields: id, updatedLelang
func (_m *Service) UpdateLelang(id uint, updatedLelang lelangs.Core) error {
	ret := _m.Called(id, updatedLelang)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, lelangs.Core) error); ok {
		r0 = rf(id, updatedLelang)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
